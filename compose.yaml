
services:
  server:
    build:
      context: .
    environment:
      - CLIENT_TOKEN
      - CLIENT_ID
      - DATABASE_URL=postgresql://postgres:prisma@db:5432/quote-bot?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_PORT=5432
      - NODE_ENV=production
      - PRISMA_CLIENT_ENGINE_TYPE=binary
    depends_on:
      - db
      - redis
    networks:
      - quotebot-network
    restart: unless-stopped
    develop:
      watch:
        - action: rebuild
          path: ./src
          target: /app/dist
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
  redis:
    image: redis
    container_name: redis-container
    restart: unless-stopped
    networks:
      - quotebot-network
  db:
    image: postgres
    restart: unless-stopped
    user: postgres
    environment:
      POSTGRES_DB: quote-bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prisma
    networks:
      - quotebot-network
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c listen_addresses='*'

networks:
  quotebot-network:
    driver: bridge

volumes:
  db-data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

